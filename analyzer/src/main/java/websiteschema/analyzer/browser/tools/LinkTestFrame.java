/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TestingFrame.java
 *
 * Created on Jan 8, 2012, 2:00:03 PM
 */
package websiteschema.analyzer.browser.tools;

import java.util.List;
import javax.swing.JOptionPane;
import org.w3c.dom.Document;
import websiteschema.analyzer.context.BrowserContext;
import websiteschema.crawler.Crawler;
import websiteschema.crawler.browser.BrowserWebCrawler;
import websiteschema.crawler.fb.FBLinksExtractor;
import websiteschema.crawler.htmlunit.HtmlUnitWebCrawler;
import websiteschema.element.DocumentUtil;

/**
 *
 * @author ray
 */
public class LinkTestFrame extends javax.swing.JFrame {

    BrowserContext context;
    String siteId;

    /** Creates new form TestingFrame */
    public LinkTestFrame() {
        initComponents();

        int screenWidth = ((int) java.awt.Toolkit.getDefaultToolkit().getScreenSize().width);
        int screenHeight = ((int) java.awt.Toolkit.getDefaultToolkit().getScreenSize().height);
        int sizeWidth = this.getWidth();
        int sizeHeight = this.getHeight();
        this.setLocation((screenWidth - sizeWidth) / 2, (screenHeight - sizeHeight) / 2);

        this.resultArea.setLineWrap(this.wrapLineCheckBox.isSelected());
        this.setTitle("测试链接抽取");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        startButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        xpathField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        crawlerCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        wrapLineCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jToolBar1.setRollover(true);

        startButton.setText("开始");
        startButton.setFocusable(false);
        startButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(startButton);

        jLabel3.setText("XPath: ");
        jToolBar1.add(jLabel3);
        jToolBar1.add(xpathField);

        jLabel1.setText("采集器:");
        jToolBar1.add(jLabel1);

        crawlerCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SimpleHTTPCrawler", "HtmlUnitWebCrawler", "BrowserWebCrawler" }));
        jToolBar1.add(crawlerCombo);

        jLabel2.setText("自动换行:");
        jToolBar1.add(jLabel2);

        wrapLineCheckBox.setSelected(true);
        wrapLineCheckBox.setFocusable(false);
        wrapLineCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        wrapLineCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        wrapLineCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wrapLineCheckBoxActionPerformed(evt);
            }
        });
        jToolBar1.add(wrapLineCheckBox);

        resultArea.setColumns(20);
        resultArea.setRows(5);
        jScrollPane1.setViewportView(resultArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        new Thread(new FooThread()).start();
    }//GEN-LAST:event_startButtonActionPerformed

    private void wrapLineCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wrapLineCheckBoxActionPerformed
        // TODO add your handling code here:
        this.resultArea.setLineWrap(this.wrapLineCheckBox.isSelected());
        this.resultArea.updateUI();
    }//GEN-LAST:event_wrapLineCheckBoxActionPerformed

    private String getCrawler() {
        return this.crawlerCombo.getSelectedItem().toString();
    }

    public BrowserContext getContext() {
        return context;
    }

    public void setContext(BrowserContext context) {
        this.context = context;
    }

    public String getSiteId() {
        return siteId;
    }

    public void setSiteId(String siteId) {
        this.siteId = siteId;
    }

    private String getXPath() {
        String xpath = this.xpathField.getText();
        return null != xpath && !"".equals(xpath) ? xpath : null;
    }

    class FooThread implements Runnable {

        @Override
        public void run() {
            start();
        }
    };

    private Document[] crawl(String url) {
        if (null != url) {
            this.setTitle("测试抽取: " + url);
            context.getConsole().log("开始采集：" + url);
            this.resultArea.setText("开始采集：" + url + "\n");
            Crawler crawler = null;
            // SimpleHTTPCrawler HtmlUnitWebCrawler BrowserWebCrawler
            if ("HtmlUnitWebCrawler".equals(getCrawler())) {
                HtmlUnitWebCrawler huwc = new HtmlUnitWebCrawler();
                huwc.setJavaScriptEnabled(true);
                crawler = huwc;
            } else if ("BrowserWebCrawler".equals(getCrawler())) {
                BrowserWebCrawler bwc = new BrowserWebCrawler();
                bwc.setAllowPopupWindow(false);
                crawler = bwc;
            } else {
                crawler = new websiteschema.crawler.SimpleHttpCrawler();
            }
            long t1 = System.currentTimeMillis();
            Document docs[] = crawler.crawl(url);
            long t2 = System.currentTimeMillis();
            context.getConsole().log("采集结束，耗时：" + (t2 - t1));
            this.resultArea.append("采集结束，耗时：" + (t2 - t1) + "\n");
            return docs;
        } else {
            return null;
        }
    }

    private void start() {
        this.startButton.setEnabled(false);
        try {
            //采集指定URL
            String url = context.getBrowser().getURL();
            Document docs[] = crawl(url);
            if (null != docs) {
                //打印采集的文档
//                for (Document doc : docs) {
//                    String html = DocumentUtil.getXMLString(doc);
//                    System.out.println(html);
//                }
                //为采集到的文档进行分类
                FBLinksExtractor ext = new FBLinksExtractor();
                ext.docs = docs;
                ext.xpath = getXPath();
                ext.url = url;

                ext.extract();

                List<String> result = ext.links;
                //对结果进行输出
                if (null != result && !result.isEmpty()) {
                    resultArea.setText("");
                    for (String str : result) {
                        resultArea.append(str);
                        resultArea.append("\n");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "无法抽取出链接！");
                }
            } else {
                JOptionPane.showMessageDialog(this, "抽取页面异常");
            }
        } finally {
            this.startButton.setEnabled(true);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox crawlerCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JButton startButton;
    private javax.swing.JCheckBox wrapLineCheckBox;
    private javax.swing.JTextField xpathField;
    // End of variables declaration//GEN-END:variables
}
