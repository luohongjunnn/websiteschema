/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TestingFrame.java
 *
 * Created on Jan 8, 2012, 2:00:03 PM
 */
package websiteschema.analyzer.browser.left.sample;

import javax.swing.JOptionPane;
import org.w3c.dom.Document;
import websiteschema.analyzer.browser.utils.ClustererUtil;
import websiteschema.analyzer.context.BrowserContext;
import websiteschema.crawler.fb.FBDOMExtractor;
import websiteschema.crawler.htmlunit.HtmlUnitWebCrawler;
import websiteschema.element.DocumentUtil;
import websiteschema.model.domain.Websiteschema;
import websiteschema.persistence.hbase.WebsiteschemaMapper;

/**
 *
 * @author ray
 */
public class TestingFrame extends javax.swing.JFrame {

    BrowserContext context;
    String siteId;

    /** Creates new form TestingFrame */
    public TestingFrame() {
        initComponents();

        int screenWidth = ((int) java.awt.Toolkit.getDefaultToolkit().getScreenSize().width);
        int screenHeight = ((int) java.awt.Toolkit.getDefaultToolkit().getScreenSize().height);
        int sizeWidth = this.getWidth();
        int sizeHeight = this.getHeight();
        this.setLocation((screenWidth - sizeWidth) / 2, (screenHeight - sizeHeight) / 2);

        this.resultArea.setLineWrap(this.wrapLineCheckBox.isSelected());
        this.setTitle("测试抽取");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        startButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        clusterNameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        javaScriptEnabledCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        wrapLineCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jToolBar1.setRollover(true);

        startButton.setText("开始");
        startButton.setFocusable(false);
        startButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(startButton);

        jLabel3.setText("指定Cluster:");
        jToolBar1.add(jLabel3);
        jToolBar1.add(clusterNameField);

        jLabel1.setText("加载JavaScript:");
        jToolBar1.add(jLabel1);

        javaScriptEnabledCheckBox.setFocusable(false);
        javaScriptEnabledCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        javaScriptEnabledCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(javaScriptEnabledCheckBox);

        jLabel2.setText("自动换行:");
        jToolBar1.add(jLabel2);

        wrapLineCheckBox.setSelected(true);
        wrapLineCheckBox.setFocusable(false);
        wrapLineCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        wrapLineCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        wrapLineCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wrapLineCheckBoxActionPerformed(evt);
            }
        });
        jToolBar1.add(wrapLineCheckBox);

        resultArea.setColumns(20);
        resultArea.setRows(5);
        jScrollPane1.setViewportView(resultArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        new Thread(new FooThread()).start();
    }//GEN-LAST:event_startButtonActionPerformed

    private void wrapLineCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wrapLineCheckBoxActionPerformed
        // TODO add your handling code here:
        this.resultArea.setLineWrap(this.wrapLineCheckBox.isSelected());
        this.resultArea.updateUI();
    }//GEN-LAST:event_wrapLineCheckBoxActionPerformed

    private boolean isJavaScriptEnabled() {
        context.getConsole().log("JavaScriptEnabled: " + this.javaScriptEnabledCheckBox.isSelected());
        this.resultArea.append("JavaScriptEnabled: " + this.javaScriptEnabledCheckBox.isSelected() + "\n");
        return this.javaScriptEnabledCheckBox.isSelected();
    }

    public BrowserContext getContext() {
        return context;
    }

    public void setContext(BrowserContext context) {
        this.context = context;
    }

    public String getSiteId() {
        return siteId;
    }

    public void setSiteId(String siteId) {
        this.siteId = siteId;
    }

    class FooThread implements Runnable {

        @Override
        public void run() {
            start();
        }
    };

    private void start() {
        this.startButton.setEnabled(false);
        try {
            WebsiteschemaMapper mapper = BrowserContext.getSpringContext().getBean("websiteschemaMapper", WebsiteschemaMapper.class);
            Websiteschema websiteschema = mapper.get(getSiteId());

            Document source = null;//(Document) context.getBrowser().getW3CDocument();
            String url = context.getBrowser().getURL();
            this.setTitle("测试抽取: " + url);
            context.getConsole().log("开始采集：" + url);
            this.resultArea.setText("开始采集：" + url + "\n");
            HtmlUnitWebCrawler crawler = new HtmlUnitWebCrawler();
            crawler.setJavaScriptEnabled(isJavaScriptEnabled());
            long t1 = System.currentTimeMillis();
            Document docs[] = crawler.crawl(url);
            long t2 = System.currentTimeMillis();
            context.getConsole().log("采集结束，耗时：" + (t2 - t1));
            this.resultArea.append("采集结束，耗时：" + (t2 - t1) + "\n");
            source = null != docs ? docs[0] : (Document) context.getBrowser().getW3CDocument();
            if (null != source) {
                String clusterName = this.clusterNameField.getText();
                if (null != clusterName && !"".equals(clusterName)) {
                    clusterName = clusterName.trim();
                } else {
                    context.getConsole().log("开始分类");
                    this.resultArea.append("开始分类\n");
                    clusterName = ClustererUtil.getInstance().classify(getSiteId(), source);
                    context.getConsole().log("此页面属于类：" + clusterName);
                    this.resultArea.append("此页面属于类：" + clusterName + "\n");
                    this.clusterNameField.setText(clusterName);
                }
                FBDOMExtractor extractor = new FBDOMExtractor();
                extractor.in = source;
                extractor.schema = websiteschema;
                extractor.clusterName = clusterName;
                context.getConsole().log("开始尝试抽取页面：");
                this.resultArea.append("开始尝试抽取页面：\n");
                extractor.extract();
                context.getConsole().log("抽取结束：");
                Document result = extractor.out;
                if (null != result) {
                    this.resultArea.setText(DocumentUtil.getXMLString(result));
                } else {
                    JOptionPane.showMessageDialog(this, "无法抽取出数据！");
                }
            } else {
                JOptionPane.showMessageDialog(this, "抽取页面异常");
            }
        } finally {
            this.startButton.setEnabled(true);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField clusterNameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JCheckBox javaScriptEnabledCheckBox;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JButton startButton;
    private javax.swing.JCheckBox wrapLineCheckBox;
    // End of variables declaration//GEN-END:variables
}
